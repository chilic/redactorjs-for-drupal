<?php

/**
 * @file
 * Enables the use WYSIWYG editor.
 */

/**
 * Implements hook_init().
 */
function redactorjs_init() {
  $page_match = FALSE;
  // Load user redactorjs.
  global $redactorjs;
  $redactorjs = FALSE;

  $user_editors = redactorjs_user_eids($GLOBALS['user']);

  if ($user_editors[0] > 0) {
    $redactorjs = redactorjs_editors($user_editors[0]);
  }
  elseif ($user_editors[1] > 0) {
    $redactorjs = redactorjs_editors($user_editors[1]);
  }

  if (isset($redactorjs) && !empty($redactorjs['pages'])) {
    $path = drupal_get_path_alias($_GET['q']);
    // Compare with the internal and path alias (if any).
    $page_match = drupal_match_path($path, $redactorjs['pages']);
    if ($path != $_GET['q']) {
      $page_match = $page_match || drupal_match_path($_GET['q'], $redactorjs['pages']);
    }
  }

  if ($page_match) {
    $settings['redactorjs'] = unserialize($redactorjs['options']);
    // Load libraries.
    drupal_add_js(drupal_get_path('module', 'redactorjs') . '/redactor/redactor.js');
    drupal_add_css(drupal_get_path('module', 'redactorjs') . '/redactor/redactor.css');

    drupal_add_js(drupal_get_path('module', 'redactorjs') . '/redactorjs.js');
    drupal_add_css(drupal_get_path('module', 'redactorjs') . '/redactorjs.css');

    // Add language settings.
    global $language;

    if ($language->language != 'en' && !isset($settings['redactorjs']['lang'])) {
      $langs = variable_get('redactorjs_langs', 'en');
      if (isset($langs[$language->language])) {
        $settings['redactorjs']['lang'] = $langs[$language->language];
      }
    }

    // Remove default language.
    if ($settings['redactorjs']['lang'] == 'en') {
      unset($settings['redactorjs']['lang']);
    }

    // Include language file.
    if ($settings['redactorjs']['lang']) {
      drupal_add_js(drupal_get_path('module', 'redactorjs') . '/lang/' . $settings['redactorjs']['lang'] . '.js');
    }

    // Add language direction.
    if ($language->direction == 1 && !isset($settings['redactorjs']['direction'])) {
      $settings['redactorjs']['direction'] = 'rtl';
    }

    // Add buttons.
    if ($settings['redactorjs']['buttons']) {
      $settings['redactorjs']['buttons'] = split(',', $settings['redactorjs']['buttons']);
    }

    // Add airButtons.
    if ($settings['redactorjs']['airButtons']) {
      $settings['redactorjs']['airButtons'] = split(',', $settings['redactorjs']['airButtons']);
    }

    // Add allowedTags.
    if ($settings['redactorjs']['allowedTags']) {
      $settings['redactorjs']['allowedTags'] = split(',', $settings['redactorjs']['allowedTags']);
    }

    // Add colors.
    if ($settings['redactorjs']['colors']) {
      $settings['redactorjs']['colors'] = split(',', $settings['redactorjs']['colors']);
    }

    drupal_add_js($settings, 'setting');
  }
}

/**
 * Implements hook_perm().
 */
function redactorjs_permission() {
  return array(
    'administer redactorjs',
  );
}

/**
 * Implements hook_menu().
 */
function redactorjs_menu() {
  $items = array();

  $items['admin/settings/redactorjs'] = array(
    'title' => 'Redactor JS',
    'description' => 'Fantastic WYSIWYG editor on jQuery',
    'page callback' => 'redactorjs_admin',
    'access callback' => 'user_access',
    'access arguments' => array('administer redactorjs'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'redactorjs.admin.inc',
  );

  $items['admin/settings/redactorjs/new'] = array(
    'title' => 'Redactor JS',
    'description' => 'Add new redactor',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redactorjs_editor_form', 'new'),
    'access callback' => 'user_access',
    'access arguments' => array('administer redactorjs'),
    'type' => MENU_CALLBACK,
    'file' => 'redactorjs.admin.inc',
  );

  $items['admin/settings/redactorjs/%'] = array(
    'title' => 'Redactor JS',
    'description' => 'Add new redactor',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('redactorjs_editor_form', 3),
    'access callback' => 'user_access',
    'access arguments' => array('administer redactorjs'),
    'type' => MENU_CALLBACK,
    'file' => 'redactorjs.admin.inc',
  );

  $items['redactorjs/upload/image'] = array(
    'title' => 'Redactor JS Upload image',
    'description' => 'Upload image',
    'page callback' => 'redactorjs_upload',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('redactorjs upload image'),
    'type' => MENU_CALLBACK,
    'file' => 'redactorjs.upload.inc',
  );

  $items['redactorjs/upload/file'] = array(
    'title' => 'Redactor JS Upload image',
    'description' => 'Upload image',
    'page callback' => 'redactorjs_upload',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('redactorjs upload file'),
    'type' => MENU_CALLBACK,
    'file' => 'redactorjs.upload.inc',
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function redactorjs_theme() {
  $theme['redactorjs_admin']['function'] = 'redactorjs_admin_theme';
  return $theme;
}

/**
 * Editor(s).
 */
function redactorjs_editors($eid = 0) {
  if (empty($eid)) {
    return FALSE;
  }
  static $editors = array(), $gotall = FALSE;
  if ($eid === 'all') {
    if (!$gotall) {
      $gotall = TRUE;
      $result = db_query("SELECT * FROM {redactorjs_editors} ORDER BY name");
      while ($editor = db_fetch_array($result)) {
        $editors[$editor['eid']] = $editor;
      }
    }
    return $editors;
  }
  elseif (!isset($editors[$eid]) && !$gotall && is_numeric($eid) && $eid > 0) {
    $editors[$eid] = db_fetch_array(db_query("SELECT * FROM {redactorjs_editors} WHERE eid = %d", $eid));
  }
  return isset($editors[$eid]) ? $editors[$eid] : FALSE;
}

/**
 * Implementation of hook_elements().
 */
function redactorjs_elements() {
  return array('textarea' => array('#process' => array('redactorjs_textarea')));
}

/**
 * Integrate the editor into textareas.
 */
function redactorjs_textarea($element) {
  global $redactorjs;
  if (isset($redactorjs) && !redactorjs_check_match($redactorjs['excludes'], $element['#id'])) {
    $element['#attributes'] = array('class' => 'redactorjs-processed');
  }
  return $element;
}

/**
 * Implements hook_form_alter().
 */
function redactorjs_form_alter(&$form, &$form_state, $form_id) {
  // Teaser splitter is unconditionally removed and NOT supported.
  if (isset($form['body_field'])) {
    unset($form['body_field']['teaser_js']);
  }

  if (isset($form['#submit'])) {
    array_unshift($form['#submit'], 'redactorjs_change_files_status');
  }
}

/**
 * Custom form submit. Change status uploaded files to "permanent".
 */
function redactorjs_change_files_status($form, &$form_state) {
  $cid = 'redactorjs:' . check_plain($form['form_build_id']['#post']['form_build_id']) . ':' . $GLOBALS['user']->uid;
  if ($cache = cache_get($cid)) {
    $values = $form_state['values'];
    foreach ($cache->data as $field_name => $files) {
      foreach ($files as $fid => $file_name) {
        if (strpos($values[$field_name], $file_name) !== FALSE) {
          $file->fid = $fid;
          $file->status = 0;
          file_set_status($file, FILE_STATUS_PERMANENT);
          unset($cache->data[$field_name][$fid]);
        }
      }
      if (count($cache->data[$field_name]) == 0) {
        unset($cache->data[$field_name]);
      }
    }
    cache_set($cid, $cache->data, 'cache', (count($cache->data) > 0) ? $cache->expire : CACHE_TEMPORARY);
  }
}

/**
 * Return the editor ids assigned to the user.
 */
function redactorjs_user_eids($user) {
  //user #1
  if ($user->uid == 1) {
    return array(variable_get('redactorjs_user1', 1), variable_get('redactorjs_user1_alt', 0));
  }
  $roles = variable_get('redactorjs_roles', array());
  //anonymous user
  if (empty($user->uid)) {
    $rid = DRUPAL_ANONYMOUS_RID;
    return isset($roles[$rid]) ? array($roles[$rid]['editor'], $roles[$rid]['alt']) : array('', '');
  }
  //other users
  foreach ($roles as $rid => $role) {
    if (isset($user->roles[$rid]) && ($role['editor'] || $role['alt'])) {
      return array($role['editor'], $role['alt']);
    }
  }
  return array('', '');
}

/**
 * Check matching lines of the needle in haystack.(page and textarea id)
 */
function redactorjs_check_match($needle, $haystack) {
  if ($needle == '') {
    return FALSE;
  }
  $needle = '/^' . preg_replace("/\r\n?|\n/", '|', str_replace(array('*', '-', '/'), array('.*', '\\-', '\\/'), trim($needle))) . '$/';
  return preg_match($needle, $haystack);
}